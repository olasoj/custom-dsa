package com.dsa.question.codility.proximiyt;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class Q2 {


    public static void main(String[] args) {

        String s = " ";
        Q2 q2 = new Q2();
        boolean doesStringContainVisibleCharacters = q2.doesStringContainVisibleCharacters(s);
        System.out.println(doesStringContainVisibleCharacters);

        List<String> splitToLines = q2.splitToLines(s);
        System.out.println(splitToLines);

        String trimUnicodeString = q2.trimUnicodeString(s);
        System.out.println(trimUnicodeString);

    }

    public boolean doesStringContainVisibleCharacters(String input) {
        // Java 11 introduced a special String's method that could replace the expression below
//        

//        !input.trim().equals("");
        return !input.isEmpty();
    }

    public List<String> splitToLines(String input) {
        // Java 11 introduced a special String's method that could replace the expression below
//        String[] lines = input.split("\n");
//        return Arrays.asList(lines);
        if (input == null) return Collections.emptyList();
        return input.lines().collect(Collectors.toList());

    }

    public String trimUnicodeString(String input) {
        // Java 11 introduced a special String's method that could replace the expression below
        // Note: The final implementation should operate on wider spectrum of whitespace characters than trim method
//        return input.trim();
        return input.strip();
    }

    public String trimLeft(String input) {
        // Java 11 introduced a special String's method that could replace the expression below
//        return input.replaceAll("^\\s*", "");
        return input.stripLeading();
    }

    public String trimRight(String input) {
        // Java 11 introduced a special String's method that could replace the expression below
        return input.replaceAll("\\s*$", "");
    }

    public String repeatStringFiveTimes(String input) {
        // Java 11 introduced a special String's method that could replace the expression below
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 5; i++) {
            sb.append(input);
        }
        return sb.toString();
    }

    public void saveStringInFile(String fileContents, String filename) throws Exception {
        Path file = Paths.get(filename);
        // Please implement the rest of this method using one of the methods of the Files class
        // The function should write the given string to the file with the given name
    }

    public String readFileContents(String filename) throws Exception {
        Path file = Paths.get(filename);
        // Please implement the rest of this method using one of the methods of the Files class
        // The function should read the contents of the file and return it as a single String value
        return "Please fix that method.";
    }

    public List<String> filterOutEmptyStrings(List<String> input) {
        // Java 11 introduces new type of Predicate - please use it here
        return input.stream()
                .filter(s -> !"".equals(s))
                .collect(Collectors.toList());
    }
}
